<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Memory Functions</title>

<!--(Meta)==========================================================-->

<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Originator content=ImportDoc>
<meta name=OriginalFile content="C:\Documentation\C Reference Guide Word Docs\mem4.doc">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=822>
<meta name=layout-width content=741>


<!--(Links)=========================================================-->

<link rel="stylesheet" href="mem4.css">



</head>

<!--(Body)==========================================================-->


<body lang=EN-US>

<h1>Memory Functions</h1>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="border: none;
				x-border-left: 1px table-solid;
				x-border-top: 1px table-solid;
				x-border-right: 1px table-solid;
				x-border-bottom: 1px table-solid;
				border-collapse: separate;
				border-spacing: 0px;
				border-spacing: 0px;"
		cellspacing=0>

<tr>
<td style="x-cell-content-align: top;
			width: 63.25pt;
			border: solid #000000 .75pt;
			border-bottom: none;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=63.3pt>
<p class=TableSpecial><a href="mem4alloc.htm">mem4alloc</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 63.25pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=63.3pt>
<p class=TableSpecial><a href="mem4create.htm">mem4create</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 63.25pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=63.3pt>
<p class=TableSpecial><a href="mem4free.htm">mem4free</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 63.25pt;
			border: solid #000000 .75pt;
			border-top: none;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=63.3pt>
<p class=TableSpecial><a href="mem4release.htm">mem4release</a></td></tr>
</table>

<p class=Body
	style="margin-top: 6.0pt; text-indent: 0px;">These memory functions 
 specialize in the repeated allocation and deallocation of fixed length 
 memory. As a result, this module is more efficient at memory management 
 than some operating systems. The general purpose operating system can 
 make few assumptions when allocating memory. Consequently, operating system 
 memory allocation tends to have a high overhead in terms of wasted memory 
 and allocation/deallocation time. On the other hand, the memory functions 
 allocate chunks of memory from the operating system, and then to sub-allocate 
 and free the memory with little overhead. </p>

<p class=SourceCode>/*ex121.c*/</p>

<p class=SourceCode>#include &quot;d4all.h&quot; </p>

<p class=SourceCode>extern unsigned _stklen = 10000 ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>static MEM4 *memory ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>typedef struct myStructSt</p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; char buffer[9] ;</p>

<p class=SourceCode>} MY_STRUCT ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>void main( void ) </p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; CODE4 cb ;</p>

<p class=SourceCode>&nbsp;&nbsp; MY_STRUCT *ms1, *ms2, *ms3 ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; code4init( &amp;cb ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; memory = mem4create( &amp;cb, 2, sizeof( 
 MY_STRUCT ), 2, 0 ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; /* ms1 and ms2 use the first block allocated 
 with mem4create*/</p>

<p class=SourceCode>&nbsp;&nbsp; ms1 = mem4alloc( memory ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; ms2 = mem4alloc( memory );</p>

<p class=SourceCode>&nbsp;&nbsp; ms3 = mem4alloc( memory );</p>

<p class=SourceCode>&nbsp;&nbsp; /* construction of ms3 causes two more 
 units to be allocated*/</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; strcpy( ms1-&gt;buffer, &quot;I &quot; 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; strcpy( ms2-&gt;buffer, &quot;WAS &quot; 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; strcpy( ms3-&gt;buffer, &quot;HERE&quot; 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; printf( &quot;%s%s%s\n&quot;, ms1-&gt;buffer, 
 ms2-&gt;buffer, ms3-&gt;buffer ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; mem4free( memory, ms1 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; mem4free( memory, ms2 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; mem4free( memory, ms3 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; /* memory still contains allocated memory 
 enough for four MY_STRUCT</p>

<p class=SourceCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sized structures 
 */</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; mem4release( memory ) ; /* free memory 
 allocated with mem4create*/</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; code4initUndo( &amp;cb ) ;</p>

<p class=SourceCode>}</p>

</body>

</html>
