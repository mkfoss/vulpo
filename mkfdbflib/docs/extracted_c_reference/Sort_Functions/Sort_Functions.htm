<!doctype HTML public "-//W3C//DTD HTML 4.0 Frameset//EN">

<html>

<!--(==============================================================)-->
<!--(Document created with RoboEditor. )============================-->
<!--(==============================================================)-->

<head>

<title>Sort Functions</title>

<!--(Meta)==========================================================-->

<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Originator content=ImportDoc>
<meta name=OriginalFile content="C:\Documentation\C Reference Guide Word Docs\mem4.doc">
<meta name=generator content="RoboHELP by eHelp Corporation - www.ehelp.com">
<meta name=generator-major-version content=0.1>
<meta name=generator-minor-version content=1>
<meta name=filetype content=kadov>
<meta name=filetype-version content=1>
<meta name=page-count content=1>
<meta name=layout-height content=2176>
<meta name=layout-width content=741>


<!--(Links)=========================================================-->

<link rel="stylesheet" href="mem4.css">



</head>

<!--(Body)==========================================================-->


<body lang=EN-US>

<h1>Sort Functions</h1>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="border: none;
				x-border-left: 1px table-solid;
				x-border-top: 1px table-solid;
				x-border-right: 1px table-solid;
				x-border-bottom: 1px table-solid;
				border-collapse: separate;
				border-spacing: 0px;
				border-spacing: 0px;"
		cellspacing=0>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border: solid #000000 .75pt;
			border-bottom: none;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4assignCmp.htm">sort4assignCmp</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4free.htm">sort4free</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4get.htm">sort4get</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4getInit.htm">sort4getInit</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border-top: none;
			border-left: solid #000000 .75pt;
			border-bottom: none;
			border-right: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4init.htm">sort4init</a></td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 88.55pt;
			border: solid #000000 .75pt;
			border-top: none;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=88.6pt>
<p class=TableSpecial><a href="sort4put.htm">sort4put</a></td></tr>
</table>

<p class=Body
	style="margin-top: 6.0pt; text-indent: 0px;">The sort module provides 
 functions to sort large or small amounts of data. Unlike standard sorting 
 routines, which only work on one type of data, CodeBase's sort routines 
 are generic and work on any type including those that you have defined. 
 </p>

<p class=Body
	style="text-indent: 0px;">Sorts are performed in memory using an efficient 
 quick sort. If the amount of information is too large to be sorted in 
 memory, it is divided up into segments and spooled to disk. A merge sort 
 is then used when the information is retrieved. </p>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="border-collapse: collapse;
				border-spacing: 0px;
				border-spacing: 0px;"
		cellspacing=0>

<tr>
<td style="x-cell-content-align: top;
			width: 90.9pt;
			border: none;
			border-top: solid #000000 4.5pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=90.9pt>
<h4>Using the Sort Module</td>
<td style="x-cell-content-align: top;
			width: 315.9pt;
			border: none;
			border-top: solid #000000 .75pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=315.9pt>
<p class=Body
	style="margin-left: 0in; text-indent: 0in;">To use the sort routines, 
 the following steps should be performed:</td></tr>
</table>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">1.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>A <span class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">SORT4</span></span> 
 structure must be constructed in your application. This structure contains 
 internal information that is vital to the sort operations. A pointer to 
 this structure will be passed to all of the sort module functions.</p>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">2.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>The <span class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">SORT4</span></span> 
 structure must be initialized by a call to <span class=InlineFunctionNames><span 
 style="font-size: 10.0pt; font-family: Arial;">sort4init</span></span>. 
 This creates an empty list called the sort list, which will eventually 
 contain the sorted data items.</p>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">3.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>If necessary, a comparison function is specified by calling <span 
 class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">sort4assignCmp</span></span>.</p>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">4.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>The sort items are added to the sort list by calls to <span class=InlineFunctionNames><span 
 style="font-size: 10.0pt; font-family: Arial;">sort4put</span></span>.</p>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">5.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span><span class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">sort4getInit</span></span> 
 is called to specify that all of the calls to <span class=InlineFunctionNames><span 
 style="font-size: 10.0pt; font-family: Arial;">sort4put </span></span>are 
 completed.</p>

<p class=BodyBullet
	style="margin-top: 0in;
			margin-right: 0in;
			margin-bottom: 3.0pt;
			margin-left: 1.5in;
			text-indent: -13.5pt;">6.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>The data items are returned in sorted order by consecutive calls 
 to <span class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">sort4get</span></span>.</p>

<p class=BodyBullet
	style="margin-left: 1.5in; text-indent: -13.5pt;">7.<span style="font: 7.0pt 'Times New Roman';">&nbsp;&nbsp;&nbsp; 
 </span>Any allocated memory is freed and any temporary files are removed 
 by calling <span class=InlineFunctionNames><span style="font-size: 10.0pt; font-family: Arial;">sort4free</span></span>. 
 </p>

<p class=SourceCode>/*ex127.c*/</p>

<p class=SourceCode>#include &quot;d4all.h&quot; </p>

<p class=SourceCode>extern unsigned _stklen = 10000 ; /* for all Borland 
 compilers */</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>void main( void )</p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; CODE4 cb ;</p>

<p class=SourceCode>&nbsp;&nbsp; DATA4 *data ;</p>

<p class=SourceCode>&nbsp;&nbsp; FIELD4 *name ;</p>

<p class=SourceCode>&nbsp;&nbsp; int rc ;</p>

<p class=SourceCode>&nbsp;&nbsp; long recNo ;</p>

<p class=SourceCode>&nbsp;&nbsp; char *info, *otherInfo ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; SORT4 dbSort ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; code4init( &amp;cb ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; data = d4open( &amp;cb, &quot;INFO&quot; 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; name = d4field( data, &quot;NAME&quot; 
 ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4init( &amp;dbSort, &amp;cb, f4len( 
 name ), d4recWidth( data ) + 1 ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; for( rc = d4top( data ); rc == r4success; 
 rc = d4skip( data, 1L ) )</p>

<p class=SourceCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sort4put( &amp;dbSort, 
 d4recNo(data), f4ptr(name), d4record(data) ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; d4close( data ) ; /* database stored in 
 dbSort.*/</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4getInit( &amp;dbSort ) ; /* no more 
 items to add.*/</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; printf( &quot;Database sorted on NAME: 
 \n&quot; ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; while( sort4get( &amp;dbSort, &amp;recNo, 
 &amp;info, &amp;otherInfo ) == 0 )</p>

<p class=SourceCode>&nbsp;&nbsp; {</p>

<p class=SourceCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; info[f4len(name) 
 - 1] = 0 ;</p>

<p class=SourceCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf(&quot;Record 
 # %ld, Info %s, OtherInfo %s\n&quot;, recNo, info, otherInfo) ;</p>

<p class=SourceCode>&nbsp;&nbsp; }</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4free( &amp;dbSort ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; code4initUndo( &amp;cb ) ;</p>

<p class=SourceCode>}</p>

<p class=SourceCode>&nbsp;</p>

<!--(Table)=========================================================-->
<table x-use-null-cells
		style="border-collapse: collapse;
				border-spacing: 0px;
				border-spacing: 0px;"
		cellspacing=0>

<tr>
<td style="x-cell-content-align: top;
			width: 90.9pt;
			border: none;
			border-top: solid #000000 1.5pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=90.9pt>
<h4>The Comparison Function </td>
<td style="x-cell-content-align: top;
			width: 310.5pt;
			border: none;
			border-top: solid #000000 1.5pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=310.5pt>
<p class=BodyTable>Since the sort routine sorts data of any type, the sort 
 module must be given a method to compare two sort items. This is the purpose 
 of the comparison function. The comparison function is a user defined 
 function that accepts two sort items and returns the item that has a greater 
 value. </td></tr>

<tr>
<td style="x-cell-content-align: top;
			width: 90.9pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=90.9pt>
<p class=Body
	style="margin-left: 0in;
			text-align: right;
			text-indent: 0in;"
	align=right><span class=InlineCommentText><span style="font-size: 9.0pt; font-family: Arial;">Default 
 Comparison Function</span></span> </td>
<td style="x-cell-content-align: top;
			width: 310.5pt;
			padding: 0in 5.4pt 0in 5.4pt;
			padding-left: 0px;
			padding-top: 0px;
			padding-right: 0px;
			padding-bottom: 0px;"
	valign=top
	width=310.5pt>
<p class=Body
	style="margin-left: 0in; text-indent: 0in;">If <span class=InlineFunctionNames><span 
 style="font-size: 10.0pt; font-family: Arial;">sort4assignCmp</span></span> 
 is not used to specify a comparison function, then the C library <b>memcmp</b>&nbsp;function 
 is used instead. If structures are going to be sorted then<span class=InlineFunctionNames><span 
 style="font-size: 10.0pt; font-family: Arial;"> sort4assignCmp</span></span> 
 should be called.. </td></tr>
</table>

<p class=Body
	style="text-indent: 0px;">The comparison function should be declared 
 as follows with <i>cFunct </i>replaced by the name of your comparison 
 function: </p>

<p class=Body
	style="text-indent: 0px;"><span class=InlinedBaseExpression><span style="font-size: 8.0pt; font-family: 'Lucida Sans Typewriter';">int 
 S4CALL cFunct( S4CMP_PARM p1,S4CMP_PARM p2, size_t len)</span></span> 
 </p>

<p class=Body
	style="text-indent: 0px;">Although the parameters <i>p1 </i>and <i>p2 
 </i>are declared as S4CMP_PARM (defined as either <b>(void *)</b> or <b>(const 
 void *)</b> depending on your compiler), they are actually pointers to 
 two sort items. The <i>len</i> parameter is the size of one sort item. 
 The body of the comparison function should compare <i>p1 </i>and <i>p2 
 </i>and return the following values:</p>

<p class=BodyIndent>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 <b>Return&nbsp;&nbsp; Meaning </b></p>

<p class=BodyIndent>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 <span class=InlineCommentText><span style="font-size: 9.0pt; font-family: Arial;">&lt; 
 0</span></span>&nbsp;&nbsp; The value pointed to by<i> p1</i> is less 
 than <i>p2.</i></p>

<p class=BodyIndent>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 <span class=InlineCommentText><span style="font-size: 9.0pt; font-family: Arial;">0</span></span>&nbsp;&nbsp; 
 The values pointed to by <i>p1 </i>and <i>p2 </i>are equal.</p>

<p class=BodyIndent>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
 <span class=InlineCommentText><span style="font-size: 9.0pt; font-family: Arial;">&gt; 
 0</span></span>&nbsp;&nbsp; The value pointed to by <i>p1</i> is greater 
 than <i>p2</i>.</p>

<p class=Body
	style="text-indent: 0px;">Here is an example sort item and its comparison 
 function: </p>

<p class=SourceCode>/*ex128.c*/</p>

<p class=SourceCode>#include &quot;d4all.h&quot;</p>

<p class=SourceCode>extern unsigned _stklen = 10000 ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>/* the Sort Item */</p>

<p class=SourceCode>typedef struct myStructSt</p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; int number ;</p>

<p class=SourceCode>&nbsp;&nbsp; char otherStuff ;</p>

<p class=SourceCode>} NUM ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>int compNum( S4CMP_PARM p1, S4CMP_PARM p2, size_t len 
 )</p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; if( ((NUM *) p1)-&gt;number &gt; ((NUM 
 *) p2)-&gt;number ) return 1 ;</p>

<p class=SourceCode>&nbsp;&nbsp; if( ((NUM *) p1)-&gt;number &lt; ((NUM 
 *) p2)-&gt;number ) return -1 ;</p>

<p class=SourceCode>&nbsp;&nbsp; return 0 ;</p>

<p class=SourceCode>}</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>void main( void )</p>

<p class=SourceCode>{</p>

<p class=SourceCode>&nbsp;&nbsp; CODE4 cb ;</p>

<p class=SourceCode>&nbsp;&nbsp; SORT4 sort ;</p>

<p class=SourceCode>&nbsp;&nbsp; NUM st1, st2, st3, *st ;</p>

<p class=SourceCode>&nbsp;&nbsp; long recNo ;</p>

<p class=SourceCode>&nbsp;&nbsp; char *notUsed ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; code4init( &amp;cb ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4init( &amp;sort, &amp;cb, sizeof( 
 NUM ), 0 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4assignCmp( &amp;sort, compNum ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; st1.number = 123 ;</p>

<p class=SourceCode>&nbsp;&nbsp; st2.number = 432 ;</p>

<p class=SourceCode>&nbsp;&nbsp; st3.number = 321 ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4put( &amp;sort, 1L, &amp;st1, NULL 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4put( &amp;sort, 2L, &amp;st2, NULL 
 ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4put( &amp;sort, 3L, &amp;st3, NULL 
 ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4getInit( &amp;sort ) ;</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; while( sort4get( &amp;sort, &amp;recNo, 
 &amp;st, &amp;notUsed ) == 0 )</p>

<p class=SourceCode>&nbsp;&nbsp; {</p>

<p class=SourceCode>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf( &quot;Sorted 
 Item: %d\n&quot;, st-&gt;number ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; }</p>

<p class=SourceCode>&nbsp;</p>

<p class=SourceCode>&nbsp;&nbsp; sort4free( &amp;sort ) ;</p>

<p class=SourceCode>&nbsp;&nbsp; code4initUndo( &amp;cb ) ;</p>

<p class=SourceCode>}</p>

</body>

</html>
